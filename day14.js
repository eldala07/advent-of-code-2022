const exampleInput = [
    "498,4 -> 498,6 -> 496,6",
    "503,4 -> 502,4 -> 502,9 -> 494,9"
  ];
  
  const realInput = ["476,71 -> 481,71", "484,52 -> 488,52", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "481,61 -> 485,61", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "454,163 -> 459,163", "444,147 -> 449,147", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "459,73 -> 464,73", "447,150 -> 447,154 -> 440,154 -> 440,160 -> 455,160 -> 455,154 -> 453,154 -> 453,150", "447,150 -> 447,154 -> 440,154 -> 440,160 -> 455,160 -> 455,154 -> 453,154 -> 453,150", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "447,150 -> 447,154 -> 440,154 -> 440,160 -> 455,160 -> 455,154 -> 453,154 -> 453,150", "472,64 -> 476,64", "447,144 -> 452,144", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "487,61 -> 491,61", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "484,64 -> 488,64", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "484,76 -> 484,80 -> 482,80 -> 482,83 -> 493,83 -> 493,80 -> 487,80 -> 487,76", "455,169 -> 460,169", "496,23 -> 496,16 -> 496,23 -> 498,23 -> 498,22 -> 498,23 -> 500,23 -> 500,17 -> 500,23 -> 502,23 -> 502,21 -> 502,23", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "447,150 -> 447,154 -> 440,154 -> 440,160 -> 455,160 -> 455,154 -> 453,154 -> 453,150", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "496,23 -> 496,16 -> 496,23 -> 498,23 -> 498,22 -> 498,23 -> 500,23 -> 500,17 -> 500,23 -> 502,23 -> 502,21 -> 502,23", "447,150 -> 447,154 -> 440,154 -> 440,160 -> 455,160 -> 455,154 -> 453,154 -> 453,150", "480,73 -> 485,73", "462,71 -> 467,71", "496,23 -> 496,16 -> 496,23 -> 498,23 -> 498,22 -> 498,23 -> 500,23 -> 500,17 -> 500,23 -> 502,23 -> 502,21 -> 502,23", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "487,55 -> 491,55", "478,58 -> 482,58", "487,48 -> 487,49 -> 494,49 -> 494,48", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "477,87 -> 477,88 -> 486,88", "477,87 -> 477,88 -> 486,88", "493,61 -> 497,61", "458,117 -> 458,121 -> 450,121 -> 450,125 -> 471,125 -> 471,121 -> 463,121 -> 463,117", "496,23 -> 496,16 -> 496,23 -> 498,23 -> 498,22 -> 498,23 -> 500,23 -> 500,17 -> 500,23 -> 502,23 -> 502,21 -> 502,23", "454,144 -> 459,144", "447,150 -> 447,154 -> 440,154 -> 440,160 -> 455,160 -> 455,154 -> 453,154 -> 453,150", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "458,117 -> 458,121 -> 450,121 -> 450,125 -> 471,125 -> 471,121 -> 463,121 -> 463,117", "458,117 -> 458,121 -> 450,121 -> 450,125 -> 471,125 -> 471,121 -> 463,121 -> 463,117", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "450,141 -> 455,141", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "484,76 -> 484,80 -> 482,80 -> 482,83 -> 493,83 -> 493,80 -> 487,80 -> 487,76", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "484,76 -> 484,80 -> 482,80 -> 482,83 -> 493,83 -> 493,80 -> 487,80 -> 487,76", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "446,128 -> 446,131 -> 442,131 -> 442,138 -> 452,138 -> 452,131 -> 450,131 -> 450,128", "493,27 -> 493,28 -> 512,28 -> 512,27", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "493,27 -> 493,28 -> 512,28 -> 512,27", "481,55 -> 485,55", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "447,150 -> 447,154 -> 440,154 -> 440,160 -> 455,160 -> 455,154 -> 453,154 -> 453,150", "484,76 -> 484,80 -> 482,80 -> 482,83 -> 493,83 -> 493,80 -> 487,80 -> 487,76", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "462,169 -> 467,169", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "484,76 -> 484,80 -> 482,80 -> 482,83 -> 493,83 -> 493,80 -> 487,80 -> 487,76", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "446,128 -> 446,131 -> 442,131 -> 442,138 -> 452,138 -> 452,131 -> 450,131 -> 450,128", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "458,117 -> 458,121 -> 450,121 -> 450,125 -> 471,125 -> 471,121 -> 463,121 -> 463,117", "446,128 -> 446,131 -> 442,131 -> 442,138 -> 452,138 -> 452,131 -> 450,131 -> 450,128", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "465,69 -> 470,69", "448,169 -> 453,169", "478,64 -> 482,64", "496,23 -> 496,16 -> 496,23 -> 498,23 -> 498,22 -> 498,23 -> 500,23 -> 500,17 -> 500,23 -> 502,23 -> 502,21 -> 502,23", "484,76 -> 484,80 -> 482,80 -> 482,83 -> 493,83 -> 493,80 -> 487,80 -> 487,76", "490,58 -> 494,58", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "484,58 -> 488,58", "491,43 -> 491,44 -> 500,44 -> 500,43", "472,69 -> 477,69", "446,128 -> 446,131 -> 442,131 -> 442,138 -> 452,138 -> 452,131 -> 450,131 -> 450,128", "496,23 -> 496,16 -> 496,23 -> 498,23 -> 498,22 -> 498,23 -> 500,23 -> 500,17 -> 500,23 -> 502,23 -> 502,21 -> 502,23", "496,23 -> 496,16 -> 496,23 -> 498,23 -> 498,22 -> 498,23 -> 500,23 -> 500,17 -> 500,23 -> 502,23 -> 502,21 -> 502,23", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "496,23 -> 496,16 -> 496,23 -> 498,23 -> 498,22 -> 498,23 -> 500,23 -> 500,17 -> 500,23 -> 502,23 -> 502,21 -> 502,23", "491,43 -> 491,44 -> 500,44 -> 500,43", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "458,117 -> 458,121 -> 450,121 -> 450,125 -> 471,125 -> 471,121 -> 463,121 -> 463,117", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "473,73 -> 478,73", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "468,67 -> 473,67", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "458,117 -> 458,121 -> 450,121 -> 450,125 -> 471,125 -> 471,121 -> 463,121 -> 463,117", "490,64 -> 494,64", "466,73 -> 471,73", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "451,147 -> 456,147", "469,71 -> 474,71", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "491,43 -> 491,44 -> 500,44 -> 500,43", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "458,117 -> 458,121 -> 450,121 -> 450,125 -> 471,125 -> 471,121 -> 463,121 -> 463,117", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "458,166 -> 463,166", "458,147 -> 463,147", "493,27 -> 493,28 -> 512,28 -> 512,27", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "446,128 -> 446,131 -> 442,131 -> 442,138 -> 452,138 -> 452,131 -> 450,131 -> 450,128", "487,48 -> 487,49 -> 494,49 -> 494,48", "446,128 -> 446,131 -> 442,131 -> 442,138 -> 452,138 -> 452,131 -> 450,131 -> 450,128", "461,114 -> 461,113 -> 461,114 -> 463,114 -> 463,105 -> 463,114 -> 465,114 -> 465,112 -> 465,114 -> 467,114 -> 467,105 -> 467,114 -> 469,114 -> 469,112 -> 469,114 -> 471,114 -> 471,109 -> 471,114 -> 473,114 -> 473,104 -> 473,114", "487,48 -> 487,49 -> 494,49 -> 494,48", "496,23 -> 496,16 -> 496,23 -> 498,23 -> 498,22 -> 498,23 -> 500,23 -> 500,17 -> 500,23 -> 502,23 -> 502,21 -> 502,23", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "496,64 -> 500,64", "484,76 -> 484,80 -> 482,80 -> 482,83 -> 493,83 -> 493,80 -> 487,80 -> 487,76", "451,166 -> 456,166", "496,23 -> 496,16 -> 496,23 -> 498,23 -> 498,22 -> 498,23 -> 500,23 -> 500,17 -> 500,23 -> 502,23 -> 502,21 -> 502,23", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41", "446,128 -> 446,131 -> 442,131 -> 442,138 -> 452,138 -> 452,131 -> 450,131 -> 450,128", "496,23 -> 496,16 -> 496,23 -> 498,23 -> 498,22 -> 498,23 -> 500,23 -> 500,17 -> 500,23 -> 502,23 -> 502,21 -> 502,23", "475,61 -> 479,61", "469,101 -> 469,95 -> 469,101 -> 471,101 -> 471,96 -> 471,101 -> 473,101 -> 473,96 -> 473,101 -> 475,101 -> 475,100 -> 475,101 -> 477,101 -> 477,91 -> 477,101 -> 479,101 -> 479,91 -> 479,101 -> 481,101 -> 481,98 -> 481,101", "503,41 -> 503,36 -> 503,41 -> 505,41 -> 505,34 -> 505,41 -> 507,41 -> 507,40 -> 507,41 -> 509,41 -> 509,33 -> 509,41 -> 511,41 -> 511,32 -> 511,41 -> 513,41 -> 513,40 -> 513,41 -> 515,41 -> 515,31 -> 515,41 -> 517,41 -> 517,31 -> 517,41 -> 519,41 -> 519,31 -> 519,41 -> 521,41 -> 521,33 -> 521,41"];
  const SOURCE_POS = [0, 500];
  const NORMALIZATION_X = 200;
  
  const getX = (pos) => Number(pos.split(",")[0]);
  const getY = (pos) => Number(pos.split(",")[1]);
  
  const findExtremas = input => {
    let xMin = SOURCE_POS[1];
    let xMax = SOURCE_POS[1];
    let yMin = SOURCE_POS[0];
    let yMax = SOURCE_POS[0];
    const oneDim = input.map(coord => coord.split(" -> ")).flat(2);
  
    oneDim.forEach(pos => {
      const [x, y] = [getX(pos), getY(pos)];
      if (x < xMin) {
        xMin = Math.round(x);
      }
      if (x > xMax) {
        xMax = Math.round(x);
      }
      if (y < yMin) {
        yMin = Math.round(y);
      }
      if (y > yMax) {
        yMax = Math.round(y);
      }
    });
    return [xMin, xMax, yMin, yMax];
  };
  
  const createSandUnit = () => {
    return ({
      x: SOURCE_POS[1],
      y: SOURCE_POS[0],
      rest: false,
    });
  };
  
  const isOutOfBounds = (sandUnit, extremas, hasBottom) => {
    const { x, y } = sandUnit;
    const [xMin, xMax, yMin, yMax] = extremas;
  
    return hasBottom ? false : (y > yMax || x > xMax || x < xMin);
  };
  
  const canGoBottom = (sandUnit, grid, xMin, yMin) => {
    const { x, y } = sandUnit;
    const normalizedX = x - xMin + NORMALIZATION_X;
    const normalizedY = y - yMin;
    const newCase = grid[normalizedY + 1][normalizedX];
    return newCase !== "#" && newCase !== "o";
  };
  
  const canGoLeft = (sandUnit, grid, xMin, yMin) => {
    const { x, y } = sandUnit;
    const normalizedX = x - xMin + NORMALIZATION_X;
    const normalizedY = y - yMin;
  
    const newCase = grid[normalizedY + 1][normalizedX - 1];
    return newCase !== "#" && newCase !== "o";
  };
  
  const canGoRight = (sandUnit, grid, xMin, yMin) => {
    const { x, y } = sandUnit;
    const normalizedX = x - xMin + NORMALIZATION_X;
    const normalizedY = y - yMin;
  
    const newCase = grid[normalizedY + 1][normalizedX + 1];
    return newCase !== "#" && newCase !== "o";
  };
  
  const isSourcePos = (x, y) => {
    return x === SOURCE_POS[1] && y === SOURCE_POS[0];
  };
  /*
   * action: if can move, move and return true;
   *         if can't move, return false
   */
  const move = (sandUnit, caveGrid, xMin, yMin, xMax, hasBottom) => {
    const { x, y } = sandUnit;
    const normalizedX = x - xMin + NORMALIZATION_X;
    const normalizedY = y - yMin;
  
    if (canGoBottom(sandUnit, caveGrid, xMin, yMin)) {
      if (!isSourcePos(x, y)) { caveGrid[normalizedY][normalizedX] = "."; }
      sandUnit.y = y + 1;
      caveGrid[normalizedY + 1][normalizedX] = "o";
      return true;
    }
    if (canGoLeft(sandUnit, caveGrid, xMin, yMin)) {
      if (!isSourcePos(x, y)) { caveGrid[normalizedY][normalizedX] = "."; }
      sandUnit.x = x - 1;
      sandUnit.y = y + 1;
      caveGrid[normalizedY + 1][normalizedX - 1] = "o";
      return true;
    }
    if (canGoRight(sandUnit, caveGrid, xMin, yMin)) {
      if (!isSourcePos(x, y)) { caveGrid[normalizedY][normalizedX] = "."; }
      sandUnit.x = x + 1;
      sandUnit.y = y + 1;
      caveGrid[normalizedY + 1][normalizedX + 1] = "o";
  
      return true;
    }
    if (isSourcePos(x, y) && hasBottom) {
      caveGrid[normalizedY][normalizedX] = "o";
    }
    return false;
  };
  
  const drawCave = (input, extremas, hasBottom) => {
    const [xMin, xMax, yMin, yMax] = extremas;
  
    const caveGrid = Array.from({ length: yMax + 1 - yMin + 1 + (hasBottom ? 1 : 0) }).map(() => Array.from({ length: xMax + NORMALIZATION_X - xMin + NORMALIZATION_X + 1 }).fill("."));
    caveGrid[SOURCE_POS[0] - yMin][SOURCE_POS[1] - xMin + NORMALIZATION_X] = "+";
  
    let count = 0;
    input.forEach((linesOfBlock, index) => {
      for (let i = 0; i <= linesOfBlock.length - 2; i++) {
        let xStart = getX(linesOfBlock[i]) - xMin + NORMALIZATION_X;
        let yStart = getY(linesOfBlock[i]) - yMin;
        let xEnd = getX(linesOfBlock[i + 1]) - xMin + NORMALIZATION_X;
        let yEnd = getY(linesOfBlock[i + 1]) - yMin;
  
        if (yEnd < yStart) {
          [yEnd, yStart] = [yStart, yEnd];
        }
        if (xEnd < xStart) {
          [xEnd, xStart] = [xStart, xEnd];
        }
  
        for (let y = yStart; y <= yEnd; y++) {
          for (let x = xStart; x <= xEnd; x++) {
            if (caveGrid[y][x] !== "#") {
              count++;
            }
            caveGrid[y][x] = "#";
          }
        }
      }
    });
  
    const bottomY = yMax + 2;
    if (hasBottom) {
      for (let x = 0; x <= xMax - xMin + NORMALIZATION_X *2; x++) {
        if (caveGrid[bottomY][x] !== "#") {
          count++;
        }
        caveGrid[bottomY][x] = "#";
      }
    }
  
    console.log("nb blocks: ", count);
    return caveGrid;
  };
  
  const prettyPrintCave = grid => console.log(grid.map(line => line.join("")));
  
  const countSandAtRest = sands => {
    return sands.filter(sand => sand.rest).length;
  };
  
  const computeNumberOfRestSands = (input, hasBottom = false) => {
    const [xMin, xMax, yMin, yMax] = findExtremas(input);
    const steadySands = [];
  
    const formattedInput = input.map(coord => coord.split(" -> "));
    const caveGrid = drawCave(formattedInput, [xMin, xMax, yMin, yMax], hasBottom);
    // prettyPrintCave(caveGrid);
  
    let reachedOutOfBounds = false;
    while (!reachedOutOfBounds) {
      const sandUnit = createSandUnit();
      for (let i = yMin; i <= hasBottom ? yMax + 2 : yMax; i++) {
        sandUnit.rest = !move(sandUnit, caveGrid, xMin, yMin, xMax, hasBottom);
  
        if (isSourcePos(sandUnit.x, sandUnit.y)) {
          prettyPrintCave(caveGrid);
          if (hasBottom) {
            console.log("stay on source");
            steadySands.push(sandUnit);
          } else {
            console.error(`stay on source error`);
          }
          reachedOutOfBounds = true;
          break;
        }
  
        if (isOutOfBounds(sandUnit, [xMin, xMax, yMin, yMax], hasBottom)) {
          console.log(`out of bounds`);
          prettyPrintCave(caveGrid);
          reachedOutOfBounds = true;
          break;
        }
  
        if (sandUnit.rest) {
          steadySands.push(sandUnit);
          break;
        }
      }
  
    }
  
    return steadySands.length;
  };
  
  
  console.log("PART 1 - example: ", computeNumberOfRestSands(exampleInput));
  console.log("PART 1 - real: ", computeNumberOfRestSands(realInput));
  
  
  console.log("PART 2 - example: ", computeNumberOfRestSands(exampleInput, true));
  console.log("PART 2- real: ", computeNumberOfRestSands(realInput, true));
  
  